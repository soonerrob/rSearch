# Project Plan: Custom Reddit Audience Research Tool

## **Objective:**  
Develop a web-based **Reddit audience research tool** similar to GummySearch, allowing for:
- **Subreddit discovery**
- **Keyword-based post & comment search**
- **Engagement & growth tracking**
- **AI-powered summarization & insights**

## **1. Tech Stack Selection**  
- **Backend:** FastAPI (Python)  
- **Frontend:** Next.js (React)  
- **Database:** PostgreSQL (or Firebase if using NoSQL)  
- **Data Scraping:** PRAW (Reddit API) or Pushshift.io  
- **AI Processing:** OpenAI API (or Llama for local processing)  
- **Hosting:** Self-hosted on **Linux server running Nginx**  

Frontend Technologies
- ReactJS/NextJS as the primary framework
- TypeScript for type safety
- TailwindCSS for styling
- Modern UI component libraries (Shadcn, Radix)
  - Shadcn UI Configuration:
    - TypeScript: yes
    - Style: Default
    - Base color: slate
    - Global CSS path: src/app/globals.css
    - CSS variables for colors: yes
    - Tailwind config path: tailwind.config.js
    - Components import alias: @/components
    - Utils import alias: @/lib/utils
- HTML/CSS fundamentals

---

## **2. Feature Breakdown**
Each feature will have **a corresponding task file for Cursor AI** to work through.  

### ✅ **Feature 1: Subreddit Discovery**  
- Fetch trending subreddits via Reddit API  
- Filter by activity, members, growth rate  
- UI: Table with sorting & filtering  

### ✅ **Feature 2: Keyword-Based Search**  
- Implement post & comment search  
- Apply filters (date, subreddit, engagement)  
- Store results for analysis  

### ✅ **Feature 3: Engagement & Growth Analytics**  
- Track subreddit metrics over time  
- Display charts (D3.js or Recharts)  

### ✅ **Feature 4: AI-Powered Summarization**  
- Extract insights from posts & comments  
- Summarize discussions with AI  

### ✅ **Feature 5: User Authentication & Personalization**  
- Save searches & preferences  
- Enable email notifications  

### ✅ **Feature 6: Themes Section - AI-Generated Categorized Insights**  
The **Themes Section** is designed to categorize and summarize Reddit discussions in an insightful, structured manner. It enables users to explore trending topics, common concerns, and emerging themes in the selected audience. This feature will be built using AI-powered text analysis to group posts into relevant themes and generate summaries.

#### **6.1 Core Components of the Themes Section**

- **Scoring-Based Themes** (Based on engagement metrics)
  - **Hot Discussions**: Highlights the most upvoted and actively engaged threads from the past week.
  - **Top Content**: Showcases the highest-performing posts over time for evergreen research.

- **AI-Based Themes** (Generated using NLP and AI processing)
  - **Advice Requests**: Posts where users explicitly ask for guidance.
  - **Solution Requests**: Users searching for tools, services, or recommendations.
  - **Pain & Anger**: Discussions expressing frustration, complaints, or challenges.
  - **Opportunities**: Posts revealing unmet needs, useful for business and product development.
  - **News**: Real-time discussions about recent industry updates.
  - **Money Talk**: Conversations around spending habits and financial decisions.
  - **Self-Promotion**: Threads where users promote their own content or services.

- **AI-Generated Summaries**
  - Summarizes top conversations within each category using OpenAI API.
  - Extracts key insights from high-engagement posts.
  - Provides a **'quick glance' overview** of discussions without requiring users to read every post.

- **User Interaction Features**
  - Clickable theme categories that lead to a section appearing with the title of the theme category that was clicked a summary of all of the discussions generated by using our open.ai api key and chatgpt and 3 buttons, 'Browse all posts', 'Common patterns', 'Ask question'. Clicking on any of these will open the same slide out panel from the right with a 'x close' button at the top right, the title again at the top left and then the same 'Browse' 'Patterns' and 'Ask question' links at the top with the active one in a brighter color. 

  - When clicking on the 'ask' section the user will see a field at the top with a chat or thought bubble icon and a placeholder text that says 'Ask a question about <insert the theme category name here> in this audience...'
  Below this will be a section called Recent Questions and this is all of the past questions that this user has asked and if they click them it will use that as the question, each of this will have a x at on ride side which will delete them from the history. when the question is submitted, this will be treated as a Q&A with this audience that will be powered by chatgpt (open.ai) api. chatgpt will then take the question and analyize up to 100 relative posts for the answer and bring back the answer to the question. Any new question will have it and its answer stored in the database. the quesiton will be added to the history and anytime someone clicks on a question from the history the stored answer will be shown as the result first but there will be a recalculate button that will cause the question to be re-sent to chatGPT for a new answer. this way repeat question will only go to the ai when recalculated. 




#### **6.2 Backend Implementation**
1. **Data Collection**
   - Fetch Reddit posts/comments using **PRAW or Pushshift.io**.
   - Store retrieved data in **PostgreSQL or Firebase**.

2. **AI & NLP Processing**
   - Use **spaCy** or **NLTK** to perform **topic modeling** on posts.
   - Apply **OpenAI API (GPT-4 or Llama)** to generate concise summaries.
   - Classify posts into predefined categories based on text content.

3. **Database Schema for Themes**
```sql
CREATE TABLE themes (
    id SERIAL PRIMARY KEY,
    category TEXT NOT NULL,  -- Hot Discussions, Top Content, Advice Requests, etc.
    post_id INTEGER REFERENCES posts(id),
    summary TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

4. **API Endpoints for Themes**
```python
from fastapi import FastAPI
from database import fetch_themes

app = FastAPI()

@app.get("/themes")
def get_themes(category: str = None):
    return fetch_themes(category)
```

#### **6.3 Frontend Implementation (Next.js & Recharts)**
- **Theme Page UI Components**
  - Sidebar: List of available themes.
  - Main Content: AI-generated summaries of each category.
  - Interactive Filters: Users can refine results by subreddit, date range, or keyword.
  - Charts & Graphs: Visual representation of recurring topics over time.

- **Example Next.js Component for Displaying Themes**
```jsx
import { useEffect, useState } from "react";

export default function Themes() {
    const [themes, setThemes] = useState([]);
    useEffect(() => {
        fetch("/api/themes").then(res => res.json()).then(data => setThemes(data));
    }, []);

    return (
        <div>
            <h1>Themes Overview</h1>
            {themes.map((theme) => (
                <div key={theme.id}>
                    <h3>{theme.category}</h3>
                    <p>{theme.summary}</p>
                </div>
            ))}
        </div>
    );
}
```

---

## **Development Guidelines**

### **Installation Commands & Prompts**
When providing installation or initialization commands that require user input:
1. ALWAYS list ALL prompts and their expected answers BEFORE running the command
2. Format the prompts and answers clearly:
   ```
   Command: <command>
   
   Prompts and answers:
   1. "Prompt question 1?"
      → Answer: `exact answer 1`
   2. "Prompt question 2?"
      → Answer: `exact answer 2`
   ```
3. Wait for user confirmation before proceeding with the command
4. If a command might have optional prompts, list those as well with "Optional:" prefix

Example:
```
Command: npx shadcn@latest init

Prompts and answers:
1. "Would you like to use TypeScript (recommended)?"
   → Answer: `yes`
2. "Which style would you like to use?"
   → Answer: `Default`
3. "Which color would you like to use as base color?"
   → Answer: `slate`
4. "Where is your global CSS file?"
   → Answer: `src/app/globals.css`
5. "Would you like to use CSS variables for colors?"
   → Answer: `yes`
6. "Where is your tailwind.config.js located?"
   → Answer: `tailwind.config.js`
7. "Configure the import alias for components:"
   → Answer: `@/components`
8. "Configure the import alias for utils:"
   → Answer: `@/lib/utils`
9. "How would you like to proceed? (React 19 compatibility)"
   → Answer: `Use --force`
```

Adding Components:
```
Command: npx shadcn@latest add button card

Prompts and answers:
1. "How would you like to proceed? (React 19 compatibility)"
   → Answer: `Use --force`
2. "Would you like to install dependencies for button?"
   → Answer: `yes`
3. "Would you like to install dependencies for card?"
   → Answer: `yes`
```