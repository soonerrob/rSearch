# Project Plan: Custom Reddit Audience Research Tool Migration

## **Objective:**  
Convert this working web app from PRAW to AsyncPRAW
- **Keep all current features working exactly was they are**
- **Convert Homepage (search and keyword suggestion), Audiences page and Audience Theme pages to AsyncPRAW with the current Postgres Database.**

## **Key Documentation**
- **PROJECT_OVERVIEW.md**: Comprehensive documentation of the application's functionality, architecture, and current status
  - Core functionality description
  - Technical implementation details
  - Database schema
  - Current migration status
  - Future plans

- **TESTING_PLAN.md**: Detailed testing strategy and progress tracking
  - Test environment setup
  - Testing areas and priorities
  - Current issues and focus areas
  - Progress tracking
  - Post retention logic testing

- **test_results**: Documentation of test execution results and findings
  - Test case outcomes
  - Bug reports
  - Performance metrics
  - Areas needing attention

## **1. Tech Stack Selection**  
- **Backend:** FastAPI (Python)  
- **Frontend:** Next.js (React)  
- **Database:** PostgreSQL (or Firebase if using NoSQL)  
- **Data Scraping:** PRAW (Reddit API) or Pushshift.io  
- **AI Processing:** OpenAI API (or Llama for local processing)  
- **Hosting:** Self-hosted on **Linux server running Nginx**  

## **2. Migration Guidelines**
- Follow testing plan in TESTING_PLAN.md
- Reference PROJECT_OVERVIEW.md for architecture decisions
- Document all test results in test_results
- Maintain backward compatibility
- Ensure proper error handling and validation
- Follow async best practices

## **3. Database Access Instructions**

⚠️ **CRITICAL - READ FIRST**
DO NOT attempt to check database state by:
- ❌ Running ANY inline Python commands, such as:
  ```bash
  # DO NOT do this:
  python -c "import asyncio; from app.db.session import async_session..."
  # OR this:
  python3 -c "from sqlalchemy import create_engine, text; engine = create_engine('postgresql://...')"
  ```
- ❌ Running server management commands (e.g., `pkill -f "uvicorn" && pkill -f "next"`)
- ❌ Running example scripts directly (e.g., `cd backend && python check_posts.py`)
- ❌ ANY direct database access via command line

ALWAYS follow the script creation pattern below to check database state.
1. First create a proper script file
2. Then run it from the correct directory
3. NO EXCEPTIONS - do not try to be clever with inline commands or direct database access

When checking database state or verifying data, use the following pattern:

1. Create a script in the backend directory (e.g., `check_audiences.py`):
```python
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import get_session
from app.models.post import Post
from sqlalchemy import text

async def count_posts(subreddit_name: str):
    async for session in get_session():
        session: AsyncSession
        result = await session.execute(
            text(f"SELECT COUNT(*) FROM redditpost WHERE subreddit_name = '{subreddit_name}'")
        )
        count = result.scalar()
        print(f"Found {count} posts for subreddit {subreddit_name}")
        
        # Optional: Print first few posts for verification
        posts = await session.execute(
            text(f"SELECT * FROM redditpost WHERE subreddit_name = '{subreddit_name}' LIMIT 5")
        )
        for post in posts:
            print(f"Post ID: {post.id}, Title: {post.title}")
        break  # We only need one session

async def main():
    await count_posts("your_subreddit_name")

if __name__ == "__main__":
    asyncio.run(main())
```

2. Run the script from the correct directory:
```bash
cd /home/rj-linux/PycharmProjects/gummysearch && cd backend && python check_audiences.py
```

Key Points:
- Always create scripts in the backend directory
- Use get_session from app.core.database
- Use proper SQLAlchemy text() for raw SQL queries
- Include proper async/await syntax
- Run from the project root directory first, then cd to backend
- Use proper table names (e.g., 'redditpost' not 'post')
- Always break after first session when using async for
- Print results clearly for debugging

## **4. Server Management Best Practices**

### IMPORTANT: Server Management Rules
1. **NEVER combine kill and start commands with &&**
   - ❌ WRONG: `pkill -f uvicorn && uvicorn main:app`
   - This is unsafe as you can't verify the kill was successful
   - The start command may fail due to lingering processes

2. **ALWAYS verify server status before any action**
   - Check if servers are running BEFORE starting:
   ```bash
   # Check for running servers
   ps aux | grep -E "uvicorn|next"
   # Check specific ports
   lsof -i :8001  # Backend port
   lsof -i :3000  # Frontend port
   ```

3. **Proper Server Shutdown Sequence**
   ```bash
   # Step 1: Try gentle shutdown first
   pkill -f "uvicorn"
   pkill -f "next"
   
   # Step 2: Verify processes are gone
   ps aux | grep -E "uvicorn|next"
   
   # Step 3: If processes persist, use force kill
   pkill -9 -f "uvicorn"
   pkill -9 -f "next"
   
   # Step 4: ALWAYS verify again
   ps aux | grep -E "uvicorn|next"
   ```

4. **Proper Server Start Sequence**
   ```bash
   # Step 1: Verify no servers running
   ps aux | grep -E "uvicorn|next"
   
   # Step 2: Start backend (from backend directory)
   cd backend
   uvicorn app.main:app --reload --port 8001
   
   # Step 3: In new terminal, verify backend running
   curl http://localhost:8001/health
   
   # Step 4: Start frontend (from frontend directory)
   cd frontend
   npm run dev
   ```

5. **Troubleshooting Running Servers**
   - If port is in use but no visible process:
   ```bash
   # Find process using port
   sudo lsof -i :8001
   sudo lsof -i :3000
   
   # Kill by port if needed
   sudo kill -9 $(lsof -t -i:8001)
   sudo kill -9 $(lsof -t -i:3000)
   ```

### Key Points to Remember
- Never assume a server is stopped without verification
- Always check server status before starting
- Wait at least 2-3 seconds after killing before starting
- Check logs after starting to verify clean startup
- If startup fails, always check for lingering processes
- Keep backend and frontend operations separate
- Use different terminal windows for backend and frontend

### Common Mistakes to Avoid
- Don't use combined kill/start commands
- Don't start servers without verifying previous instances are gone
- Don't ignore error messages during startup
- Don't assume port availability without checking
- Don't use kill -9 as first option (try gentle shutdown first)

# Server Management

## Starting Servers
1. Always kill existing processes before starting servers:
```bash
# Check for running processes
sudo lsof -i :3000,3001,8001

# Kill any existing processes
sudo pkill -9 -f "next"  # Kill frontend
sudo pkill -9 -f "uvicorn"  # Kill backend

# Verify processes are killed
ps aux | grep -E "next|uvicorn|python" | grep -v grep
```

2. Start backend first:
```bash
cd backend && uvicorn app.main:app --reload --port 8001
```

3. Start frontend in a new terminal:
```bash
cd frontend && npm run dev
```

## Port Conflict Resolution
1. If port 3000 is in use:
   - Frontend will automatically try port 3001
   - This is expected behavior

2. If port 8001 is in use:
   - Backend must use port 8001
   - No automatic fallback
   - Must kill existing process

3. Common Issues:
   - "Address already in use" error
   - Next.js port fallback messages
   - Uvicorn refusing to start

4. Resolution Steps:
   a. Check running processes
   b. Kill all relevant processes
   c. Wait 2-3 seconds
   d. Verify ports are free
   e. Start servers in correct order