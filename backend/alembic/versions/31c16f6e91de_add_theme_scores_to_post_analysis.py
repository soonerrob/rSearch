"""add theme scores to post analysis

Revision ID: 31c16f6e91de
Revises: f184c96f5c04
Create Date: 2025-03-16 10:50:12.820486

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import text
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.schema import DropTable


@compiles(DropTable, "postgresql")
def _compile_drop_table(element, compiler, **kwargs):
    return compiler.visit_drop_table(element) + " CASCADE"

# revision identifiers, used by Alembic.
revision: str = '31c16f6e91de'
down_revision: Union[str, None] = 'f184c96f5c04'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, create the theme_scores column
    op.add_column('postanalysis', sa.Column('theme_scores', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    
    # Drop foreign key constraints first
    op.drop_constraint('postanalysis_post_id_fkey', 'postanalysis', type_='foreignkey')
    op.drop_constraint('comments_post_id_fkey', 'comments', type_='foreignkey')
    op.drop_constraint('themepost_post_id_fkey', 'themepost', type_='foreignkey')
    
    # Copy data from redditpost to redditposts
    conn = op.get_bind()
    conn.execute(text("""
        INSERT INTO redditposts (
            id, reddit_id, subreddit_name, title, content, author, score, 
            num_comments, created_at, collected_at, upvote_ratio, 
            is_original_content, distinguished, stickied, collection_source, 
            engagement_score, awards
        )
        SELECT 
            id, reddit_id, subreddit_name, title, content, author, score, 
            num_comments, created_at, collected_at, upvote_ratio, 
            is_original_content, distinguished, stickied, collection_source, 
            engagement_score, awards
        FROM redditpost
        WHERE NOT EXISTS (
            SELECT 1 FROM redditposts WHERE redditposts.reddit_id = redditpost.reddit_id
        )
    """))

    # Update foreign key references
    conn.execute(text("""
        UPDATE postanalysis 
        SET post_id = redditposts.id 
        FROM redditpost 
        JOIN redditposts ON redditpost.reddit_id = redditposts.reddit_id 
        WHERE postanalysis.post_id = redditpost.id
    """))

    conn.execute(text("""
        UPDATE comments 
        SET post_id = redditposts.id 
        FROM redditpost 
        JOIN redditposts ON redditpost.reddit_id = redditposts.reddit_id 
        WHERE comments.post_id = redditpost.id
    """))

    conn.execute(text("""
        UPDATE themepost 
        SET post_id = redditposts.id 
        FROM redditpost 
        JOIN redditposts ON redditpost.reddit_id = redditposts.reddit_id 
        WHERE themepost.post_id = redditpost.id
    """))

    # Now we can safely drop the old table and its dependencies
    op.drop_index('ix_redditpost_reddit_id', table_name='redditpost')
    op.drop_table('redditpost')
    
    # Add new columns and constraints
    op.add_column('comments', sa.Column('parent_id', sa.Integer(), nullable=True))
    op.add_column('comments', sa.Column('is_op', sa.Boolean(), nullable=False))
    op.alter_column('comments', 'author',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('comments', 'content',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('comments', 'score',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('comments', 'is_submitter',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('comments', 'depth',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('comments', 'engagement_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('comments', 'stickied',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.drop_index('ix_comments_parent_comment_id', table_name='comments')
    op.drop_index('ix_comments_path', table_name='comments', postgresql_using='gin')
    op.create_index(op.f('ix_comments_parent_id'), 'comments', ['parent_id'], unique=False)
    op.drop_constraint('comments_parent_comment_id_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'redditposts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'comments', 'comments', ['parent_id'], ['id'])
    op.drop_column('comments', 'edited')
    op.drop_column('comments', 'collected_at')
    op.drop_column('comments', 'collection_source')
    op.drop_column('comments', 'parent_comment_id')
    op.drop_column('comments', 'awards')
    op.alter_column('postanalysis', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index('ix_postanalysis_post_id', table_name='postanalysis')
    op.create_foreign_key(None, 'postanalysis', 'redditposts', ['post_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'themepost', 'redditposts', ['post_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'themepost', type_='foreignkey')
    op.create_foreign_key('themepost_post_id_fkey', 'themepost', 'redditpost', ['post_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'postanalysis', type_='foreignkey')
    op.create_foreign_key('postanalysis_post_id_fkey', 'postanalysis', 'redditpost', ['post_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_postanalysis_post_id', 'postanalysis', ['post_id'], unique=True)
    op.alter_column('postanalysis', 'post_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('postanalysis', 'theme_scores')
    op.add_column('comments', sa.Column('awards', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('parent_comment_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('collection_source', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('collected_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('edited', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key('comments_post_id_fkey', 'comments', 'redditpost', ['post_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('comments_parent_comment_id_fkey', 'comments', 'comments', ['parent_comment_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_comments_parent_id'), table_name='comments')
    op.create_index('ix_comments_path', 'comments', ['path'], unique=False, postgresql_using='gin')
    op.create_index('ix_comments_parent_comment_id', 'comments', ['parent_comment_id'], unique=False)
    op.alter_column('comments', 'stickied',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('comments', 'engagement_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('comments', 'depth',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('comments', 'is_submitter',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('comments', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('comments', 'score',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('comments', 'content',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('comments', 'author',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('comments', 'is_op')
    op.drop_column('comments', 'parent_id')
    op.create_table('redditpost',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('reddit_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('subreddit_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('num_comments', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('upvote_ratio', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'1'::double precision"), autoincrement=False, nullable=True),
    sa.Column('is_original_content', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('distinguished', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('stickied', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('collection_source', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('engagement_score', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=True),
    sa.Column('awards', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subreddit_name'], ['subreddits.name'], name='fk_redditpost_subreddit', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='redditpost_pkey')
    )
    op.create_index('ix_redditpost_reddit_id', 'redditpost', ['reddit_id'], unique=True)
    # ### end Alembic commands ###
